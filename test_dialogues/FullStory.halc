
// This is using the halcyon script syntax to prototype a full story in one page.
// This is kind of based on a script for embersong

// brief overview of quest phases

`quests {

    // prototyping the data layout in JSON
    questId: "q1" // this automatically creates the q1 namespace for all facts
    // facts are hierarchical maps of tags to values
    // eg. q1.knowledge.bed.wasnt_used = true; will lazily set this fact to true within the facts database.
    // all quest facts are by default in the global namespace but there are ghosted versions of each of these in 
    // the `i` and `p` namespaces.

    // p is per player, while i is per interaction

    questName: "The Red Room"
    // any number of these facts could be active at any given time.
    // if no facts are present then the quest will have nothing that appears.
    // this is for like a very freeform quest style.

    // the quest state is the main tagline that shows what the current objective is in a traditional quest system.
    // feel free
    questStates: {
        "undiscovered" : {
        },
        "looking_for_gerard" : {},
        "grace_is_lying" :{},
        "nankos_abduction" :{},
        "gerard_is_lying" :{},
        "help_gerard" :{},
        "save_grace_or_nanko": {}
        // endings
        "nanko_is_indicted": {}
        "grace_is_indicted": {}
        "gerard_absconds": {}
    }

    factsEvaluator: {
        {
                if q1.knowledge.should_talk_to_grace {
                    q1.journal("It sounds like the inkeeper, Grace, discovered evidence of something horrible that happened last week, we should go pay her a visit.")
                    // guess we could do something like:
                    // sendEvent(q1.updateQuestState)
                };

                if  g.Grace.isDead and
                    g.Gerard.isDead and 
                    g.Nanko.isDead and 
                    g.Trader.isDead
                {
                    q1.journal("Grace, Gerard, Nanko and trader joe are all dead. It doesn't seem like we'd be able to do anything at this point.")
                }
            ]
        },
        {
            phaseName: "searchForTheNobleman",
                q1.knowledge.grace.suspectsGerard : 
        },
        {
            phaseName: "Fail_EveryoneIsDead",
        }
    }
}

`vars {
    import g.party : Name[];
}

`characters
{
    character grace {
        // any vars defined here are under the c.grace. namespace
        name_known: bool = false;
        displayName: string = "The woman";
    };
}

[hello]
@if(PersonA.isPissedOff)
PersonA: Can you flip off?
@else
PersonA: Hello!
    > I hate you:
        @setVar(PersonA.isPissedOff = true)
        PersonA: Well flip you bud.
    > Hello:
        @goto hello

// these labels can be qualified with decorators
[talk_to_grace; @once(grace)]
    $: She is hunched over her meal, barely making any effort to eat.
    Grace: Huh?... Oh I am sorry I didnt quite see you there.
    Grace: I guess I am a bit distracted
    [talk_to_grace_eating]
        > Is everything alright? You are hardly eating.
            @todo
        > Hear any interesting rumors?
            $: She sheepishly avoids your eye contact and resumes forking through her plate.
            Grace: Sorry... I dont really have any rumors. Im just trying to eat here ok?
            @goto talk_to_grace_eating
        @if( p.canParticiate(Dean) and p.party.contains(Dean) )
        Dean > I can tell whenever a beautiful woman is in distress! Tell me fair lady, what distresses your beautiful heart so?
            @sendEvent(dean leans into grace)
            @goto dean_talk_to_grace
        @if( q.redRoomQuest.undiscoveredPhase.barkeeper_says_grace_knows_something )
        > Word is you know what happened in the red room last thursday.
            $: Her droop sadly.
            Grace: I- I- dont know what I saw. I can tell you but... its complicated.

[dean_talk_to_grace; @requires(g.canParticiate(Dean))]
    // the c namespace is also global but specifically exists for that one character.
    $: @var(c.grace.displayName) starts to get visibly uncomfortable as Dean leans in.
    Grace: c-can you stop leaning in so close to me? I'm just trying to eat here.
        > (Let this play out)
            Dean: And just how were you planning to do that? With such a sullen face? Eating while upset is bad for the digestion you know.
            Dean: Please my dear! Allow us to help you! Seeing you in such a state will ruin my day!
            $: She starts to relent and shuffles back in her chair a bit.
            Grace: Ok, OK already I'll tell you, but you have to promise to tone it down a bit. I'm not really supposed to talk about it.
            @sendEvent(dean leans back out)
            @waitForEvent(dean lean finish)
            @goto grace_explanation

        @if( p.canParticiate(Kaito) )
        > (Pull Dean Back)
            @sendEvent(dean leans back out)
            Kaito: Please excuse my friend here! He's really quite a handful you know; Dropped as a child and all that!
            Kaito: We'll leave you to finishing your meal. Sorry to disturb you.
            $: At hearing those last three words, @var(c.grace.displayName) turns white as a sheet.
            Dean: Huh? Just what the hell is going on.
            Grace: I'm sorry it's just... those were the last words he said to me before... he dissapeared.
            @goto grace_explanation

[grace_explanation]
    Grace: It all started a few days ago. The nobleman came to town and checked in at this inn. He arrived in a
    the middle of a storm and was desperate for a place to stay.

    @sendEven(start cutscene stormy night arrival)

    @waitForEvent(end cutscene stormy night arrival)

    Grace: after that he went into his room in the back.

    Grace: The next morning we heard nothing from his room so I started to go down the hall to knock on his door.

    Grace: But when I opened the door... A slithering horrible black mass was in the entire room. It reached out towards me and I 
    screamed and slammed the door shut. 

    Grace: A while later A few of the other men knocked down the door, the room was covered in blood and it stank. But the writing mass.. it was gone.
    It's been a week now and we've mostly cleaned up the room.

    @if(p.canParticiate(Drask))

        Drask: That sounds like dark fae magic to me

        @if(p.canParticiate(Kaito))

            Kaito: When is it NOT dark fae magic with you?

            Drask: Those fae are are deceptive... dangerous.

    Grace: There's something else you should know... 

    Grace: I saw Gerard coming from down the hall. 

    Grace: But there's only one room around the corner, that one.

    @if(p.canParticiate(Kaito))
        Kaito: So that means.. Gerard must've come from that room?

    Grace: No doubt about it there's nothing else down that way.

    Grace: And since then. We haven't been able to find him.

    @questUpdateFacts(
        q1.knowledge.Gerard.seenLeavingTheRoom = true;
        q1.knowledge.Gerard.isMissing = true;
        q1.knowledge.Grace.suspectsGerard = true;
    )

[red_room.bed]
    $: This appears to be a fairly normal bed.
    @if(p.canParticiate(Kaito) and q1.isPhaseActive(investigate_the_room))
        Kaito: It doesn't appear to be used at all.
        @questUpdateFacts(
            q1.knowledge.bed.wasnt_used = true;
        )


